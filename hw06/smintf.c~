/* vim: set tabstop=4 shiftwidth=4 fileencoding=utf-8 noexpandtab: */
#include <stdlib.h>
#include <stdarg.h>
#include <stdbool.h>
#include "smintf.h"
char* smintf(const char *format, ...){
        va_list myst, myst1, myst2;
	va_start(myst, format);
	va_copy(myst1, myst);  // first loop
	va_copy(myst2, myst);  // second loop
	int element_num;  // use for malloc
	char* format_copy = format;  // hold the initial pointer of format
	char* s;  // return char*
	double inputdouble = 0;
	int inte = 0;
	int deci = 0;
        char *inputstring;
	
	//  count the size of malloc
	while (*format_copy != '\0') {
		if (*format_copy == '%'){  // find the %
		  format_copy++;
			switch(*format_copy) {  // determine what is next to the %
				case 'd':
					element_num += count_integer_num(va_arg(myst1, int), 10, "");  // print decimal
				break;

				case 'x':
					element_num += count_integer_num(va_arg(myst1, int), 16, "0x");  // print hex
				break;

				case 'b':
					element_num += count_integer_num(va_arg(myst1, int), 2, "0b");  // print binary
				break;

				case '$':
					inputdouble = va_arg(myst1, double);  // print a $ sign with 2 digit after the '.'
					inte = (int)inputdouble;
					element_num += count_integer_num(inte, 10, "$");
					deci = (int)(inputdouble * 100 - inte * 100);
					if (deci < 0) {  // print -abc.def instead of -abc.-def
					deci = - deci;
					}
					element_num++;
					if (deci <= 9) {  // print abc.0d instead of abc.d
					element_num++;
					}
					element_num += count_integer_num(deci, 10, "");
				break;

				case 's':
					inputstring = va_arg(myst1, char*);  // print a string
					while (*inputstring != '\0') {
						element_num++;
						inputstring++;
					}
				break;

				case 'c':
					element_num++;  // print a character
				break;
				
				case '%':
					element_num++;  // print one % instead of two
				break;

			        case '\0':
				        element_num++; // if % at the end of string
					format_copy--;
				break;

				default:  // print the case that is not listed above as what it is
					format_copy--;
					element_num++;
					format_copy++;
					element_num++;
					break;
			}
		}
		else {  // if there is no %, print directly
		element_num++;
		}
		format_copy++;
	}

	// malloc
	s = malloc(sizeof(char) * (element_num + 1));


	// initialize again
	inputdouble = 0;
	inte = 0;
	deci = 0;
	format_copy = format;
	element_num = 0;
	char* hold;
	int num_hold = 0;
	

	// get content
	while (*format_copy != '\0') {
		if (*format_copy == '%'){  // find the %
			format_copy++;
			switch(*format_copy) {  // determine what is next to the %
				case 'd':
				  num_hold = count_integer_num(va_arg(myst2, int), 10, "");
				  hold = malloc(sizeof(char) * (num_hold +1));
				  hold = count_integer(va_arg(myst2, int), 10, "");  // print decimal
				  num_hold = 0;  // use as a counter
				  while (hold != '\0'){
				    s[element_num++] = hold[num_hold++];
				  }
				  free(hold);
				break;

				case 'x':
				  num_hold = count_integer_num(va_arg(myst2, int), 16, "0x");  // print hex
				  hold = malloc(sizeof(char) * (num_hold +1));
				  hold = count_integer(va_arg(myst2, int), 16, "0x");  // print hex
				  num_hold = 0;  // use as a counter
				  while (hold != '\0'){
				    s[element_num++] = hold[num_hold++];
				  }
				  free(hold);
				break;

				case 'b':
				  num_hold = count_integer_num(va_arg(myst2, int), 2, "0b");  // print binary
				  hold = malloc(sizeof(char) * (num_hold +1));
				  hold = count_integer(va_arg(myst2, int), 2, "0b");  // print binary
				  num_hold = 0;  // use as a counter
				  while (hold != '\0'){
				    s[element_num++] = hold[num_hold++];
				  }
				  free(hold);
				break;

				case '$':
				  inputdouble = va_arg(myst2, double);  // print a $ sign with 2 digit after the '.'
				  inte = (int)inputdouble;
				  //  print inte part with $
				  num_hold = count_integer_num(inte, 10, "$");
				  hold = malloc(sizeof(char) * (num_hold +1));
				  hold = count_integer(inte, 10, "$");
				  num_hold = 0;  // use as a counter
				  while (hold != '\0'){
				    s[element_num++] = hold[num_hold++];
				  }
				  free(hold);				  
				  //  print '.'
				  deci = (int)(inputdouble * 100 - inte * 100);
				  if (deci < 0) {  // print -abc.def instead of -abc.-def
				    deci = - deci;
				  }
				  s[element_num++] = '.';
				  if (deci <= 9) {  // print abc.0d instead of abc.d
				    s[element_num++] = '0';
				  }
				  //  print deci part
				  num_hold = count_integer_num(deci, 10, "");
				  hold = malloc(sizeof(char) * (num_hold +1));
				  hold = count_integer(deci, 10, "");
				  num_hold = 0;  // use as a counter
				  while (hold != '\0'){
				    s[element_num++] = hold[num_hold++];
				  }
				  free(hold);
				break;

				case 's':
					inputstring = va_arg(myst2, char*);  // print a string
					while (*inputstring != '\0') {
						s[element_num++] = *inputstring;
						inputstring++;
					}
				break;

				case 'c':
					s[element_num++] = va_arg(myst2, int);  // print a character
				break;
				
				case '%':
					s[element_num++] = '%';  // print one % instead of two
				break;

			        case '\0':
				        s[element_num++] = '%'; // if % at the end of string
					format_copy--;
				break;

				default:  // print the case that is not listed above as what it is
					format_copy--;
					s[element_num++] = *format_copy;
					format_copy++;
					s[element_num++] = *format_copy;
					break;
			}
		}
		else {  // if there is no %, print directly
		s[element_num++] = *format_copy;
		}
		format_copy++;
	}

	s[element_num] = '\0';  // end of string mark

	//va_end
	va_end(myst1);
	va_end(myst2);
	va_end(myst);
return   //return a char* 
}

char* count_integer(int n, int radix, char* prefix) {
	char allnum[] = "0123456789abcdefghijklmnopqrstuvwxyz";
	int dig = 0;
	char data[200] = "0";
	int i = 0;
	int j = 0;
	int count = 0;  // count num
	char* out_p;  // return
	if (n < 0) {  // print a '-' if n is a negative number
	fputc('-', stdout);
	}

	while (n >= radix) {  // convert positive number
	data[dig] = allnum[n % radix];
	n = n / radix;
	dig++;
	}

	if (n > 0) {  // incase if n is less than radix
	data[dig] = allnum[n % radix];
	}

	while (n <= -radix) {  // convert negative number
	data[dig] = allnum[-(n % radix)];
	n = n / radix;
	dig++;
	}

	if (n < 0) {  // incase if n does not need to be converted
	data[dig] = allnum[-n];
	}

	// count num

	while (prefix[j] != '\0') {  // print prefix
	j++;
	}

	count = j + dig + 1;
	j = 0;
	// return string
	out_p = malloc(sizeof(char) * (count + 1));
	while (prefix[j] != '\0') {  // print prefix
	out_p[j] = prefix[j];
	j++;
	}

	for (i = dig; i > -1; i--) {  // print the converted result
	out_p[j] = data[i];
	j++;
	}
	out_p[j] = '\0';
	return out_p;
}

int count_integer_num(int n, int radix, char* prefix) {
	char allnum[] = "0123456789abcdefghijklmnopqrstuvwxyz";
	int dig = 0;
	char data[200] = "0";
	int i = 0;
	int j = 0;
	int count = 0;  // count num
	if (n < 0) {  // print a '-' if n is a negative number
	fputc('-', stdout);
	}

	while (n >= radix) {  // convert positive number
	data[dig] = allnum[n % radix];
	n = n / radix;
	dig++;
	}

	if (n > 0) {  // incase if n is less than radix
	data[dig] = allnum[n % radix];
	}

	while (n <= -radix) {  // convert negative number
	data[dig] = allnum[-(n % radix)];
	n = n / radix;
	dig++;
	}

	if (n < 0) {  // incase if n does not need to be converted
	data[dig] = allnum[-n];
	}

	// count num

	while (prefix[j] != '\0') {  // print prefix
	j++;
	}

	count = j + dig;
	return count;
}

// Bonus option only:
// void mintf(const char *format, ...);

#endif
